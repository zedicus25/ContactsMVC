<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVVXOFVtbxmRcXMamW1vG1ltb
        x/ZcXMf/XFzH/1tbx/ZbW8bWXFzGpltbxmRVVc4VAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWlrJMFxcx6lbW8b6XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1tbxvpcXMepWlrJMAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW1vIDltbxppbW8b9XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9bW8b9W1vGmltb
        yA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhYxy5bW8bdXFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xc
        x/9cXMf/W1vG3VhYxy4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABaWsY7W1vG8Fxc
        x/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/W1vG8FpaxjsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWFjHLltb
        xvBcXMf/XFzH/1xcx/9bW8X/U1Ou/1BQpv9QUKb/UFCm/1BQpv9QUKb/UFCm/1BQpv9QUKb/UFCm/1BQ
        pv9QUKb/UFCm/1BQpv9TU67/W1vF/1xcx/9cXMf/W1vG8FhYxy4AAAAAAAAAAAAAAAAAAAAAAAAAAFtb
        yA5bW8bdXFzH/1xcx/9cXMf/XFzH/1twy/9dldz/Xpng/3NdT/9oepf/Xpng/16Z4P9emeD/Xpng/16Z
        4P9emeD/Xpng/16Z4P9emeD/XZXc/1Vqu/9WVrj/XFzH/1xcx/9cXMf/W1vG3VtbyA4AAAAAAAAAAAAA
        AAAAAAAAW1vGmlxcx/9cXMf/XFzH/1xcx/9cXMf/XZXe/16Z4P9emeD/c11P/2h6l/9emeD/Xpng/16Z
        4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/XZXc/1VVtv9cXMf/XFzH/1xcx/9cXMf/W1vGmgAA
        AAAAAAAAAAAAAFpayTBbW8b9XFzH/1xcx/9cXMf/V1e7/1BQpv9Sgbr/U4TA/16Z4P9zXU//aHqX/16Z
        4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/VVW2/1xcx/9cXMf/XFzH/1xc
        x/9bW8b9WlrJMAAAAAAAAAAAXFzHqVxcx/9cXMf/XFzH/1xcx/+Ch8r/0N7f/9Hg4P+80Nr/Xpng/3Nd
        T/9oepf/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9VVbb/XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMepAAAAAFVVzhVbW8b6XFzH/1xcx/9cXMf/XFzH/4SJz//Q3t//0eDg/77U
        4P9emeD/c11P/2h6l/9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/0tL
        mf9XV7v/XFzH/1xcx/9cXMf/XFzH/1tbxvpVVc4VW1vGZFxcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xc
        x/9emeD/Xpng/16Z4P9zXU//aHqX/16Z4P9emeD/er7u/4bO9P+Hz/X/h8/1/4bO9P96vu7/Xpng/16Z
        4P9emeD/n69u/3Z9pf9cXMf/XFzH/1xcx/9cXMf/XFzH/1tbxmRaWsamXFzH/1xcx/9cXMf/XFzH/1xc
        x/9XV7v/UFCm/1KBuv9ThMD/Xpng/3NdT/9oepf/Xpng/16Z4P+Hz/X/h8/1/4fP9f+Hz/X/h8/1/4fP
        9f9emeD/Xpng/16Z4P+gsW3/hY+e/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzGpltbxtZcXMf/XFzH/1xc
        x/9cXMf/XFzH/4KHyv/Q3t//0eDg/7zQ2v9emeD/c11P/2h6l/9emeD/Xpng/3/F8f+Hz/X/h8/1/4fP
        9f+Hz/X/f8Xx/16Z4P9emeD/Xpng/6Cxbf+Ejp//XFzH/1xcx/9cXMf/XFzH/1xcx/9bW8bWW1vG9Vxc
        x/9cXMf/XFzH/1xcx/9cXMf/hInP/9De3//R4OD/vtTg/16Z4P9zXU//aHqX/16Z4P9emeD/a6vn/4fP
        9f+Hz/X/h8/1/4fP9f9rq+f/Xpng/16Z4P9emeD/dHyE/2Nlu/9cXMf/XFzH/1xcx/9cXMf/XFzH/1tb
        x/ZcXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/16Z4P9emeD/Xpng/3NdT/9oepf/Xpng/16Z
        4P9emeD/b7Do/4TM8/+EzPP/b7Do/16Z4P9emeD/Xpng/16Z4P+Xl7//Z2e//1xcx/9cXMf/XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1dXu/9QUKb/UoG6/1OEwP9emeD/c11P/2h6
        l/9emeD/Xpng/16Z4P9gnOH/cLHp/3Cx6f9gnOH/Xpng/16Z4P9emeD/Xpng/+jo6P+srOL/XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/W1vG9Vxcx/9cXMf/XFzH/1xcx/9cXMf/gofK/9De3//R4OD/vNDa/16Z
        4P9zXU//aHqX/16Z4P9emeD/Xpng/3zB7/+Hz/X/h8/1/3zB7/9emeD/Xpng/16Z4P9emeD/6Ojo/62t
        4/9cXMf/XFzH/1xcx/9cXMf/XFzH/1tbx/ZbW8bWXFzH/1xcx/9cXMf/XFzH/1xcx/+Eic//0N7f/9Hg
        4P++1OD/Xpng/3NdT/9oepf/Xpng/16Z4P9emeD/h8/1/4fP9f+Hz/X/h8/1/16Z4P9emeD/Xpng/16Z
        4P/m5uj/lJTa/1xcx/9cXMf/XFzH/1xcx/9cXMf/W1vG1lpaxqZcXMf/XFzH/1xcx/9cXMf/XFzH/1xc
        x/9cXMf/Xpng/16Z4P9emeD/c11P/2h6l/9emeD/Xpng/16Z4P98we//h8/1/4fP9f98we//Xpng/16Z
        4P9emeD/Xpng/0tLmf9XV7v/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMamW1vGZFxcx/9cXMf/XFzH/1xc
        x/9cXMf/V1e7/1BQpv9Sgbr/U4TA/16Z4P9zXU//aHqX/16Z4P9emeD/Xpng/2Cc4f9wsen/cLHp/2Cc
        4f9emeD/Xpng/16Z4P9emeD/wKJv/4N4pv9cXMf/XFzH/1xcx/9cXMf/XFzH/1tbxmRVVc4VXFzH+Vxc
        x/9cXMf/XFzH/1xcx/+Ch8r/0N7f/9Hg4P+80Nr/Xpng/3NdT/9oepf/Xpng/16Z4P9emeD/Xpng/16Z
        4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P/Bo27/mIee/1xcx/9cXMf/XFzH/1xcx/9bW8b6VVXOFQAA
        AABcXMepXFzH/1xcx/9cXMf/XFzH/4SJz//Q3t//0eDg/77U4P9emeD/c11P/2h6l/9emeD/Xpng/16Z
        4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/8Gjbv+Xhp//XFzH/1xcx/9cXMf/XFzH/1xc
        x6kAAAAAAAAAAFpayTBcXMf8XFzH/1xcx/9cXMf/XFzH/1xcx/9emeD/Xpng/16Z4P9zXU//aHqX/16Z
        4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/inyV/2hkvv9cXMf/XFzH/1xc
        x/9bW8b9WlrJMAAAAAAAAAAAAAAAAFtbxppcXMf/XFzH/1xcx/9cXMf/XFzH/12V3v9emeD/Xpng/3Nd
        T/9oepf/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/12V3v9bW8X/XFzH/1xc
        x/9cXMf/XFzH/1tbxpoAAAAAAAAAAAAAAAAAAAAAW1vIDltbxt1cXMf/XFzH/1xcx/9cXMf/XHLP/12V
        3v9emeD/c11P/2h6l/9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9emeD/Xpng/16Z4P9dld7/XHLP/1xc
        x/9cXMf/XFzH/1xcx/9bW8bdW1vIDgAAAAAAAAAAAAAAAAAAAAAAAAAAWFjHLltbxvBcXMf/XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/W1vG8FhYxy4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWlrGO1tb
        xvBcXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/XFzH/1tbxvBaWsY7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAWFjHLltbxt1cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9bW8bdWFjHLgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAW1vIDltbxppcXMf8XFzH/1xcx/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9bW8b9W1vGmltbyA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFpayTBcXMepXFzH+Vxcx/9cXMf/XFzH/1xc
        x/9cXMf/XFzH/1xcx/9cXMf/XFzH/1xcx/9bW8b6XFzHqVpayTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVVc4VW1vGZFpa
        xqZbW8bWW1vG9Vxcx/9cXMf/W1vG9VtbxtZaWsamW1vGZFVVzhUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8AD//8AAP/8AAA/+AAAH/AAAA/gAAAHwAAAA8AAAAOAAAABgAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAABwAAAA8AA
        AAPgAAAH8AAAD/gAAB/8AAA//wAA///AA/8=
</value>
  </data>
</root>